# Generated by Django 4.2.7 on 2025-09-07 11:58

import challenges.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Challenge name", max_length=80, verbose_name="name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Challenge description", verbose_name="description"
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        default=100,
                        help_text="Challenge point value",
                        verbose_name="value",
                    ),
                ),
                (
                    "initial_value",
                    models.IntegerField(
                        default=100,
                        help_text="Initial challenge point value for dynamic scoring",
                        verbose_name="initial value",
                    ),
                ),
                (
                    "min_value",
                    models.IntegerField(
                        default=50,
                        help_text="Minimum challenge point value for dynamic scoring",
                        verbose_name="minimum value",
                    ),
                ),
                (
                    "decay",
                    models.FloatField(
                        default=0.0,
                        help_text="Score decay factor for dynamic scoring",
                        verbose_name="decay",
                    ),
                ),
                (
                    "decay_threshold",
                    models.IntegerField(
                        default=1,
                        help_text="Number of solves before decay starts",
                        verbose_name="decay threshold",
                    ),
                ),
                (
                    "max_attempts",
                    models.IntegerField(
                        default=0,
                        help_text="Maximum number of attempts allowed (0 for unlimited)",
                        verbose_name="max attempts",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("standard", "Standard"),
                            ("dynamic", "Dynamic"),
                            ("scripted", "Scripted"),
                        ],
                        default="standard",
                        help_text="Challenge type",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("hidden", "Hidden"),
                            ("visible", "Visible"),
                            ("locked", "Locked"),
                        ],
                        default="visible",
                        help_text="Challenge visibility state",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this challenge is visible to users",
                        verbose_name="is visible",
                    ),
                ),
                (
                    "flag_logic",
                    models.CharField(
                        choices=[("any", "Any Flag"), ("all", "All Flags")],
                        default="any",
                        help_text="Logic for determining if multiple flags are correct",
                        max_length=10,
                        verbose_name="flag logic",
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        help_text="Challenge author name",
                        max_length=80,
                        null=True,
                        verbose_name="author",
                    ),
                ),
                (
                    "difficulty",
                    models.IntegerField(
                        default=3,
                        help_text="Challenge difficulty (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="difficulty",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the challenge was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the challenge was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "challenge",
                "verbose_name_plural": "challenges",
                "ordering": ["category__order", "value"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name",
                        max_length=80,
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Category description",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="FontAwesome icon class",
                        max_length=30,
                        null=True,
                        verbose_name="icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="HEX color code for this category",
                        max_length=20,
                        verbose_name="color",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0,
                        help_text="Display order of the category",
                        verbose_name="order",
                    ),
                ),
                (
                    "is_hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the category is hidden",
                        verbose_name="hidden",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the category was created",
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "challenge category",
                "verbose_name_plural": "challenge categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ChallengeFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Challenge file",
                        upload_to=challenges.models.challenge_file_path,
                        verbose_name="file",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the file",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="File description",
                        max_length=255,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        default=0, help_text="File size in bytes", verbose_name="size"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the file was uploaded",
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "challenge file",
                "verbose_name_plural": "challenge files",
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Comment content", verbose_name="content"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the comment was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the comment was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "comment",
                "verbose_name_plural": "comments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Challenge file",
                        upload_to=challenges.models.file_upload_path,
                        verbose_name="file",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="Original filename",
                        max_length=255,
                        verbose_name="filename",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="File description",
                        max_length=255,
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        default=0, help_text="File size in bytes", verbose_name="size"
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this file is visible to users",
                        verbose_name="is visible",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the file was uploaded",
                        verbose_name="created at",
                    ),
                ),
            ],
            options={
                "verbose_name": "file",
                "verbose_name_plural": "files",
            },
        ),
        migrations.CreateModel(
            name="Flag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag",
                    models.CharField(
                        default="",
                        help_text="Flag content or pattern",
                        max_length=255,
                        verbose_name="flag",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("static", "Static"),
                            ("regex", "Regular Expression"),
                            ("dynamic", "Dynamic"),
                        ],
                        default="static",
                        help_text="Flag type",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "data",
                    models.TextField(
                        blank=True,
                        help_text="Additional data for dynamic flags",
                        null=True,
                        verbose_name="data",
                    ),
                ),
                (
                    "is_case_insensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the flag is case insensitive",
                        verbose_name="case insensitive",
                    ),
                ),
            ],
            options={
                "verbose_name": "flag",
                "verbose_name_plural": "flags",
            },
        ),
        migrations.CreateModel(
            name="Hint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Hint content", verbose_name="content"),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="Point cost to unlock this hint (0 for free)",
                        verbose_name="cost",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        default=0,
                        help_text="Display order of the hint",
                        verbose_name="position",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this hint is visible to users",
                        verbose_name="is visible",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the hint was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the hint was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "hint",
                "verbose_name_plural": "hints",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="HintUnlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="Points deducted for unlocking this hint",
                        verbose_name="cost",
                    ),
                ),
                (
                    "unlocked_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the hint was unlocked",
                        verbose_name="unlocked at",
                    ),
                ),
            ],
            options={
                "verbose_name": "hint unlock",
                "verbose_name_plural": "hint unlocks",
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag_submitted",
                    models.CharField(
                        default="",
                        help_text="The flag string that was submitted",
                        max_length=255,
                        verbose_name="flag submitted",
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the submission was correct",
                        verbose_name="is correct",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the flag was submitted",
                        verbose_name="submitted at",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address the submission came from",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        help_text="Challenge the flag was submitted for",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="challenges.challenge",
                    ),
                ),
            ],
            options={
                "verbose_name": "submission",
                "verbose_name_plural": "submissions",
                "ordering": ["-submitted_at"],
            },
        ),
    ]

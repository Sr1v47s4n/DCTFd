# Generated by Django 4.2.7 on 2025-09-07 11:58

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the CTF event",
                        max_length=128,
                        unique=True,
                        verbose_name="event name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the event", verbose_name="description"
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        help_text="Brief description for listings and previews",
                        max_length=255,
                        verbose_name="short description",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Event logo",
                        null=True,
                        upload_to="event_logos/",
                        verbose_name="logo",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True,
                        help_text="Event banner for website header",
                        null=True,
                        upload_to="event_banners/",
                        verbose_name="banner",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        help_text="When the event begins", verbose_name="start time"
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        help_text="When the event ends", verbose_name="end time"
                    ),
                ),
                (
                    "registration_start",
                    models.DateTimeField(
                        help_text="When registration for the event begins",
                        verbose_name="registration start",
                    ),
                ),
                (
                    "registration_end",
                    models.DateTimeField(
                        help_text="When registration for the event ends",
                        verbose_name="registration end",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("registration", "Registration Open"),
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        help_text="Current status of the event",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the event is visible to all users",
                        verbose_name="public",
                    ),
                ),
                (
                    "registration_open",
                    models.BooleanField(
                        default=False,
                        help_text="Whether users can register for the event",
                        verbose_name="registration open",
                    ),
                ),
                (
                    "max_team_size",
                    models.IntegerField(
                        default=5,
                        help_text="Maximum number of members per team",
                        verbose_name="maximum team size",
                    ),
                ),
                (
                    "min_team_size",
                    models.IntegerField(
                        default=1,
                        help_text="Minimum number of members per team",
                        verbose_name="minimum team size",
                    ),
                ),
                (
                    "allow_individual_participants",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users can participate without a team",
                        verbose_name="allow individual participants",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the event was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the event was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "event",
                "verbose_name_plural": "events",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="EventAnnouncement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Announcement title",
                        max_length=128,
                        verbose_name="title",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Announcement content", verbose_name="content"
                    ),
                ),
                (
                    "important",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is an important announcement",
                        verbose_name="important",
                    ),
                ),
                (
                    "publish_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When to publish the announcement",
                        verbose_name="publish time",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the announcement was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the announcement was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "event announcement",
                "verbose_name_plural": "event announcements",
                "ordering": ["-publish_time"],
            },
        ),
        migrations.CreateModel(
            name="EventRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("waitlisted", "Waitlisted"),
                        ],
                        default="pending",
                        help_text="Current status of the registration",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "registered_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the registration was submitted",
                        verbose_name="registered at",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or comments",
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "eligibility_confirmed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the participant has confirmed eligibility for prizes",
                        verbose_name="eligibility confirmed",
                    ),
                ),
                (
                    "organizer_notes",
                    models.TextField(
                        blank=True,
                        help_text="Private notes for organizers",
                        null=True,
                        verbose_name="organizer notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "event registration",
                "verbose_name_plural": "event registrations",
                "ordering": ["event", "registered_at"],
            },
        ),
        migrations.CreateModel(
            name="EventSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "use_dynamic_scoring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether challenge points decrease as more teams solve them",
                        verbose_name="use dynamic scoring",
                    ),
                ),
                (
                    "show_scoreboard",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the scoreboard is visible to participants",
                        verbose_name="show scoreboard",
                    ),
                ),
                (
                    "freeze_scoreboard_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to freeze the scoreboard (optional)",
                        null=True,
                        verbose_name="freeze scoreboard at",
                    ),
                ),
                (
                    "show_challenge_details",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to show challenge details like solves and category",
                        verbose_name="show challenge details",
                    ),
                ),
                (
                    "require_email_verification",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users must verify their email before participating",
                        verbose_name="require email verification",
                    ),
                ),
                (
                    "allow_team_changes",
                    models.BooleanField(
                        default=True,
                        help_text="Whether participants can change teams during the event",
                        verbose_name="allow team changes",
                    ),
                ),
                (
                    "team_change_cutoff",
                    models.DateTimeField(
                        blank=True,
                        help_text="Deadline after which team changes are not allowed (optional)",
                        null=True,
                        verbose_name="team change cutoff",
                    ),
                ),
                (
                    "enable_hints",
                    models.BooleanField(
                        default=True,
                        help_text="Whether hints are available for challenges",
                        verbose_name="enable hints",
                    ),
                ),
                (
                    "enable_team_chat",
                    models.BooleanField(
                        default=True,
                        help_text="Whether team members can chat with each other",
                        verbose_name="enable team chat",
                    ),
                ),
                (
                    "enable_challenge_feedback",
                    models.BooleanField(
                        default=True,
                        help_text="Whether participants can provide feedback on challenges",
                        verbose_name="enable challenge feedback",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        default="default",
                        help_text="Visual theme for the event",
                        max_length=50,
                        verbose_name="theme",
                    ),
                ),
            ],
            options={
                "verbose_name": "event settings",
                "verbose_name_plural": "event settings",
            },
        ),
        migrations.CreateModel(
            name="OrganizerTaskAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Task title", max_length=128, verbose_name="title"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Task description", verbose_name="description"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("blocked", "Blocked"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the task",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of the task",
                        max_length=20,
                        verbose_name="priority",
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the task should be completed by",
                        null=True,
                        verbose_name="due date",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the task was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the task was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the task was completed",
                        null=True,
                        verbose_name="completed at",
                    ),
                ),
            ],
            options={
                "verbose_name": "organizer task assignment",
                "verbose_name_plural": "organizer task assignments",
                "ordering": ["-priority", "due_date", "created_at"],
            },
        ),
    ]

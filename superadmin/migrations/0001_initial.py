# Generated by Django 4.2.7 on 2025-09-07 11:58

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BackupConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of this backup configuration",
                        max_length=128,
                        verbose_name="name",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this backup configuration is active",
                        verbose_name="enabled",
                    ),
                ),
                (
                    "backup_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Backup"),
                            ("database", "Database Only"),
                            ("files", "Files Only"),
                            ("custom", "Custom"),
                        ],
                        default="full",
                        help_text="Type of backup to perform",
                        max_length=20,
                        verbose_name="backup type",
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("custom", "Custom Schedule"),
                        ],
                        default="daily",
                        help_text="How often to perform backups",
                        max_length=20,
                        verbose_name="frequency",
                    ),
                ),
                (
                    "custom_cron",
                    models.CharField(
                        blank=True,
                        help_text='Custom cron expression for backup schedule (used if frequency is "custom")',
                        max_length=100,
                        null=True,
                        verbose_name="custom cron",
                    ),
                ),
                (
                    "storage_type",
                    models.CharField(
                        choices=[
                            ("local", "Local Storage"),
                            ("s3", "Amazon S3"),
                            ("gcs", "Google Cloud Storage"),
                            ("azure", "Azure Blob Storage"),
                            ("sftp", "SFTP Server"),
                        ],
                        default="local",
                        help_text="Where to store the backup files",
                        max_length=20,
                        verbose_name="storage type",
                    ),
                ),
                (
                    "storage_path",
                    models.CharField(
                        default="backups/",
                        help_text="Path or bucket where backups will be stored",
                        max_length=255,
                        verbose_name="storage path",
                    ),
                ),
                (
                    "storage_credentials",
                    models.JSONField(
                        blank=True,
                        help_text="Credentials for the storage provider (encrypted)",
                        null=True,
                        verbose_name="storage credentials",
                    ),
                ),
                (
                    "retention_count",
                    models.IntegerField(
                        default=10,
                        help_text="Number of backups to retain before deleting old ones",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name="retention count",
                    ),
                ),
                (
                    "compress",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to compress the backup files",
                        verbose_name="compress",
                    ),
                ),
                (
                    "encrypt",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to encrypt the backup files",
                        verbose_name="encrypt",
                    ),
                ),
                (
                    "notification_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email to notify about backup status",
                        max_length=254,
                        null=True,
                        verbose_name="notification email",
                    ),
                ),
                (
                    "last_backup_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the last backup was performed",
                        null=True,
                        verbose_name="last backup time",
                    ),
                ),
                (
                    "last_backup_status",
                    models.CharField(
                        blank=True,
                        help_text="Status of the last backup attempt",
                        max_length=20,
                        null=True,
                        verbose_name="last backup status",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this configuration was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this configuration was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "backup configuration",
                "verbose_name_plural": "backup configurations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceWindow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the maintenance window",
                        max_length=128,
                        verbose_name="title",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the maintenance activities",
                        verbose_name="description",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        help_text="When the maintenance window begins",
                        verbose_name="start time",
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        help_text="When the maintenance window ends",
                        verbose_name="end time",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        help_text="Current status of the maintenance window",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "affects_registration",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the maintenance affects user registration",
                        verbose_name="affects registration",
                    ),
                ),
                (
                    "affects_challenges",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the maintenance affects challenge availability",
                        verbose_name="affects challenges",
                    ),
                ),
                (
                    "affects_submissions",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the maintenance affects flag submissions",
                        verbose_name="affects submissions",
                    ),
                ),
                (
                    "affects_scoreboard",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the maintenance affects scoreboard updates",
                        verbose_name="affects scoreboard",
                    ),
                ),
                (
                    "complete_downtime",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the platform will be completely inaccessible",
                        verbose_name="complete downtime",
                    ),
                ),
                (
                    "visible_to_users",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to display a notice to users about this maintenance",
                        verbose_name="visible to users",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this maintenance window was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this maintenance window was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "maintenance window",
                "verbose_name_plural": "maintenance windows",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="PlatformConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "site_name",
                    models.CharField(
                        default="DCTFd",
                        help_text="Name of the CTF platform",
                        max_length=128,
                        verbose_name="site name",
                    ),
                ),
                (
                    "site_description",
                    models.TextField(
                        default="CTF Platform",
                        help_text="Brief description of the platform",
                        verbose_name="site description",
                    ),
                ),
                (
                    "platform_logo",
                    models.ImageField(
                        blank=True,
                        help_text="Logo to display on the platform",
                        null=True,
                        upload_to="platform/",
                        verbose_name="platform logo",
                    ),
                ),
                (
                    "favicon",
                    models.ImageField(
                        blank=True,
                        help_text="Favicon for the website",
                        null=True,
                        upload_to="platform/",
                        verbose_name="favicon",
                    ),
                ),
                (
                    "admin_email",
                    models.EmailField(
                        default="admin@example.com",
                        help_text="Email address for administrative contact",
                        max_length=254,
                        verbose_name="admin email",
                    ),
                ),
                (
                    "support_email",
                    models.EmailField(
                        default="support@example.com",
                        help_text="Email address for support inquiries",
                        max_length=254,
                        verbose_name="support email",
                    ),
                ),
                (
                    "twitter_handle",
                    models.CharField(
                        blank=True,
                        help_text="Twitter handle without the @ symbol",
                        max_length=15,
                        null=True,
                        verbose_name="twitter handle",
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(
                        blank=True,
                        help_text="Facebook page URL",
                        null=True,
                        verbose_name="facebook URL",
                    ),
                ),
                (
                    "discord_invite",
                    models.CharField(
                        blank=True,
                        help_text="Discord invite code",
                        max_length=50,
                        null=True,
                        verbose_name="discord invite",
                    ),
                ),
                (
                    "github_url",
                    models.URLField(
                        blank=True,
                        help_text="GitHub repository URL",
                        null=True,
                        verbose_name="github URL",
                    ),
                ),
                (
                    "enable_registration",
                    models.BooleanField(
                        default=True,
                        help_text="Allow new users to register",
                        verbose_name="enable registration",
                    ),
                ),
                (
                    "require_email_verification",
                    models.BooleanField(
                        default=True,
                        help_text="Require email verification for new accounts",
                        verbose_name="require email verification",
                    ),
                ),
                (
                    "enable_team_creation",
                    models.BooleanField(
                        default=True,
                        help_text="Allow users to create teams",
                        verbose_name="enable team creation",
                    ),
                ),
                (
                    "enable_public_scoreboard",
                    models.BooleanField(
                        default=True,
                        help_text="Make the scoreboard visible to non-participants",
                        verbose_name="enable public scoreboard",
                    ),
                ),
                (
                    "max_team_size",
                    models.IntegerField(
                        default=5,
                        help_text="Maximum members allowed in a team (platform-wide default)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="maximum team size",
                    ),
                ),
                (
                    "max_login_attempts",
                    models.IntegerField(
                        default=5,
                        help_text="Maximum failed login attempts before temporary lockout",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="maximum login attempts",
                    ),
                ),
                (
                    "max_submissions_per_minute",
                    models.IntegerField(
                        default=10,
                        help_text="Maximum flag submission attempts per minute",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="maximum submissions per minute",
                    ),
                ),
                (
                    "maintenance_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Put the platform in maintenance mode (only admins can access)",
                        verbose_name="maintenance mode",
                    ),
                ),
                (
                    "maintenance_message",
                    models.TextField(
                        default="The platform is currently undergoing maintenance. Please check back later.",
                        help_text="Message displayed during maintenance mode",
                        verbose_name="maintenance message",
                    ),
                ),
                (
                    "platform_version",
                    models.CharField(
                        default="1.0.0",
                        help_text="Current version of the platform",
                        max_length=20,
                        verbose_name="platform version",
                    ),
                ),
                (
                    "enable_analytics",
                    models.BooleanField(
                        default=False,
                        help_text="Enable analytics tracking",
                        verbose_name="enable analytics",
                    ),
                ),
                (
                    "analytics_code",
                    models.TextField(
                        blank=True,
                        help_text="Analytics tracking code (e.g., Google Analytics)",
                        null=True,
                        verbose_name="analytics code",
                    ),
                ),
                (
                    "terms_of_service",
                    models.TextField(
                        blank=True,
                        help_text="Terms of service text",
                        null=True,
                        verbose_name="terms of service",
                    ),
                ),
                (
                    "privacy_policy",
                    models.TextField(
                        blank=True,
                        help_text="Privacy policy text",
                        null=True,
                        verbose_name="privacy policy",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the configuration was last updated",
                        verbose_name="last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "platform configuration",
                "verbose_name_plural": "platform configurations",
            },
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the log entry was created",
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("debug", "Debug"),
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        default="info",
                        help_text="Severity level of the log entry",
                        max_length=10,
                        verbose_name="level",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("security", "Security"),
                            ("user", "User Management"),
                            ("team", "Team Management"),
                            ("challenge", "Challenge Management"),
                            ("event", "Event Management"),
                            ("system", "System Management"),
                            ("performance", "Performance"),
                            ("other", "Other"),
                        ],
                        default="system",
                        help_text="Category of the log entry",
                        max_length=20,
                        verbose_name="category",
                    ),
                ),
                (
                    "message",
                    models.TextField(help_text="Log message", verbose_name="message"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address associated with this log entry",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent associated with this log entry",
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional JSON data related to this log entry",
                        null=True,
                        verbose_name="additional data",
                    ),
                ),
            ],
            options={
                "verbose_name": "system log",
                "verbose_name_plural": "system logs",
                "ordering": ["-timestamp"],
            },
        ),
    ]

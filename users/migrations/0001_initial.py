# Generated by Django 4.2.7 on 2025-09-07 11:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.avatar_models
import users.models
import utils.country_code
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("event", "0002_initial"),
        ("teams", "0001_initial"),
        ("challenges", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaseUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Required. 3-150 characters. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=0,
                                message="Enter a valid username.",
                                regex="^[\\w.@+-]{3,150}$",
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=60,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=0,
                                message="Enter a valid first name.",
                                regex="^[a-zA-Z\\s.]{2,60}$",
                            )
                        ],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=0,
                                message="Enter a valid last name.",
                                regex="^[a-zA-Z\\s.]{2,30}$",
                            )
                        ],
                        verbose_name="last name",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("organizer", "Organizer"),
                            ("admin", "Admin"),
                        ],
                        default="user",
                        max_length=10,
                        verbose_name="user type",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly identifier. Auto-generated if not provided.",
                        max_length=150,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=0,
                                message="Enter a valid slug.",
                                regex="^[a-zA-Z0-9-_]+$",
                            )
                        ],
                        verbose_name="slug",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("none", "Prefer not to say"),
                        ],
                        default="none",
                        max_length=10,
                        verbose_name="gender",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                flags=0,
                                message="Enter a valid phone number.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        default="IN",
                        max_length=2,
                        null=True,
                        validators=[utils.country_code.validate_country_code],
                        verbose_name="country",
                    ),
                ),
                (
                    "preferred_avatar_theme",
                    models.CharField(
                        blank=True,
                        help_text="User's preferred avatar theme category",
                        max_length=50,
                        null=True,
                        verbose_name="preferred avatar theme",
                    ),
                ),
                (
                    "custom_avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Custom profile picture (legacy)",
                        null=True,
                        upload_to=users.models.user_avatar_path,
                        verbose_name="custom avatar",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="A short description about yourself",
                        null=True,
                        verbose_name="biography",
                    ),
                ),
                (
                    "affiliation",
                    models.CharField(
                        blank=True,
                        help_text="School, company, or organization",
                        max_length=128,
                        null=True,
                        verbose_name="affiliation",
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True,
                        help_text="Personal website or blog",
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="website",
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        default=0, help_text="Total points earned", verbose_name="score"
                    ),
                ),
                (
                    "last_active",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Last time the user was active",
                        verbose_name="last active",
                    ),
                ),
                (
                    "discord_id",
                    models.CharField(
                        blank=True,
                        help_text="Discord username",
                        max_length=20,
                        null=True,
                        verbose_name="discord ID",
                    ),
                ),
                (
                    "github_username",
                    models.CharField(
                        blank=True,
                        help_text="GitHub username",
                        max_length=39,
                        null=True,
                        verbose_name="github username",
                    ),
                ),
                (
                    "linkedin_profile",
                    models.URLField(
                        blank=True,
                        help_text="LinkedIn profile URL",
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                        verbose_name="linkedin profile",
                    ),
                ),
                (
                    "twitter_username",
                    models.CharField(
                        blank=True,
                        help_text="Twitter/X username without @",
                        max_length=15,
                        null=True,
                        verbose_name="twitter username",
                    ),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        default=False,
                        help_text="Hide profile from public listings",
                        verbose_name="hidden profile",
                    ),
                ),
                (
                    "banned",
                    models.BooleanField(
                        default=False,
                        help_text="User is banned from participating",
                        verbose_name="banned",
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the email address has been verified",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "secret_key",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Secret key for API access",
                        verbose_name="secret key",
                    ),
                ),
                (
                    "is_team_captain",
                    models.BooleanField(
                        default=False,
                        help_text="User is the captain of their team",
                        verbose_name="team captain",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                (
                    "last_password_change",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last password change"
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "swappable": "AUTH_USER_MODEL",
            },
        ),
        migrations.CreateModel(
            name="AvatarCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="name"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="slug")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "display_order",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="display order"
                    ),
                ),
            ],
            options={
                "verbose_name": "Avatar Category",
                "verbose_name_plural": "Avatar Categories",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="UserSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_email",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications",
                        verbose_name="email notifications",
                    ),
                ),
                (
                    "notification_browser",
                    models.BooleanField(
                        default=True,
                        help_text="Receive browser notifications",
                        verbose_name="browser notifications",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light"),
                            ("dark", "Dark"),
                            ("system", "System"),
                        ],
                        default="light",
                        help_text="UI theme preference",
                        max_length=20,
                        verbose_name="theme",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en",
                        help_text="Preferred language",
                        max_length=10,
                        verbose_name="language",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="Preferred timezone",
                        max_length=50,
                        verbose_name="timezone",
                    ),
                ),
                (
                    "show_solved_challenges",
                    models.BooleanField(
                        default=True,
                        help_text="Show already solved challenges in challenge list",
                        verbose_name="show solved challenges",
                    ),
                ),
                (
                    "leaderboard_visibility",
                    models.BooleanField(
                        default=True,
                        help_text="Show user on public leaderboards",
                        verbose_name="leaderboard visibility",
                    ),
                ),
                (
                    "two_factor_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable two-factor authentication",
                        verbose_name="two-factor authentication",
                    ),
                ),
                (
                    "hide_email",
                    models.BooleanField(
                        default=True,
                        help_text="Hide email from public profile",
                        verbose_name="hide email",
                    ),
                ),
                (
                    "hide_phone",
                    models.BooleanField(
                        default=True,
                        help_text="Hide phone from public profile",
                        verbose_name="hide phone",
                    ),
                ),
                (
                    "notify_team_join_request",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notification when someone requests to join your team",
                        verbose_name="notify on team join request",
                    ),
                ),
                (
                    "notify_challenge_solve",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notification when a team member solves a challenge",
                        verbose_name="notify on challenge solve",
                    ),
                ),
                (
                    "notify_event_announcement",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notification for event announcements",
                        verbose_name="notify on event announcement",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="User these settings belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user setting",
                "verbose_name_plural": "user settings",
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        help_text="Django session key",
                        max_length=40,
                        unique=True,
                        verbose_name="session key",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the session was created",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Browser/client information",
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of device used",
                        max_length=20,
                        null=True,
                        verbose_name="device type",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Approximate location based on IP",
                        max_length=100,
                        null=True,
                        verbose_name="location",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the session was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "last_active",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the session was last active",
                        verbose_name="last active",
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the session has expired",
                        verbose_name="expired",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who owns this session",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user session",
                "verbose_name_plural": "user sessions",
                "ordering": ["-last_active"],
            },
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("submission", "Challenge Submission"),
                            ("solve", "Challenge Solve"),
                            ("registration", "Registration"),
                            ("profile_update", "Profile Update"),
                            ("team_join", "Team Join"),
                            ("team_leave", "Team Leave"),
                            ("password_change", "Password Change"),
                            ("password_reset", "Password Reset"),
                            ("hint_unlock", "Hint Unlock"),
                            ("file_download", "File Download"),
                            ("other", "Other"),
                        ],
                        help_text="Type of activity performed",
                        max_length=20,
                        verbose_name="activity type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about the activity",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the activity was performed",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Browser/client information",
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the activity occurred",
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related challenge (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_activities",
                        to="challenges.challenge",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related event (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_activities",
                        to="event.event",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related team (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_activities",
                        to="teams.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who performed the activity",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user activity",
                "verbose_name_plural": "user activities",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PasswordReset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Reset token",
                        unique=True,
                        verbose_name="token",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the token was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When the token expires", verbose_name="expires at"
                    ),
                ),
                (
                    "used",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the token has been used",
                        verbose_name="used",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the reset was requested",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who requested a password reset",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_resets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "password reset",
                "verbose_name_plural": "password resets",
            },
        ),
        migrations.CreateModel(
            name="EmailVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Verification token",
                        unique=True,
                        verbose_name="token",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the token was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When the token expires", verbose_name="expires at"
                    ),
                ),
                (
                    "used",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the token has been used",
                        verbose_name="used",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who needs to verify their email",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_verifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "email verification",
                "verbose_name_plural": "email verifications",
            },
        ),
        migrations.CreateModel(
            name="AvatarOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "image",
                    models.ImageField(
                        upload_to=users.avatar_models.avatar_file_path,
                        verbose_name="image",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, verbose_name="is default"),
                ),
                (
                    "display_order",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="display order"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatars",
                        to="users.avatarcategory",
                        verbose_name="category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Avatar Option",
                "verbose_name_plural": "Avatar Options",
                "ordering": ["category", "display_order", "name"],
            },
        ),
        migrations.AddField(
            model_name="baseuser",
            name="avatar",
            field=models.ForeignKey(
                blank=True,
                help_text="Profile avatar",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="users.avataroption",
                verbose_name="avatar",
            ),
        ),
        migrations.AddField(
            model_name="baseuser",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="baseuser",
            name="team",
            field=models.ForeignKey(
                blank=True,
                help_text="The team this user belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="members",
                to="teams.team",
            ),
        ),
        migrations.AddField(
            model_name="baseuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="UserChallengeSolve",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "flag",
                    models.TextField(
                        help_text="The flag that was submitted", verbose_name="flag"
                    ),
                ),
                (
                    "points",
                    models.IntegerField(
                        default=0,
                        help_text="Points awarded for the solve",
                        verbose_name="points",
                    ),
                ),
                (
                    "first_blood",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this was the first solve for this challenge",
                        verbose_name="first blood",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the challenge was solved",
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the solve was submitted",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        help_text="Challenge that was solved",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_solves_compat",
                        to="challenges.challenge",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        help_text="Team the user belonged to when solving",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="solves_compat",
                        to="teams.team",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who solved the challenge",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="solve_compat",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user challenge solve",
                "verbose_name_plural": "user challenge solves",
                "ordering": ["-timestamp"],
                "unique_together": {("user", "challenge")},
            },
        ),
        migrations.AddConstraint(
            model_name="avataroption",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("category", "is_default"),
                name="unique_default_per_category",
            ),
        ),
    ]

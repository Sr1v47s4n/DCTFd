# Generated by Django 4.2.7 on 2025-09-07 11:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the event",
                        max_length=100,
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly name of the event",
                        max_length=120,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Full description of the event",
                        verbose_name="description",
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        help_text="Brief description for listings and previews",
                        max_length=250,
                        verbose_name="short description",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="Event logo image",
                        null=True,
                        upload_to="event_logos/",
                        verbose_name="logo",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True,
                        help_text="Event banner image for headers",
                        null=True,
                        upload_to="event_banners/",
                        verbose_name="banner",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        help_text="When the event begins", verbose_name="start time"
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        help_text="When the event ends", verbose_name="end time"
                    ),
                ),
                (
                    "registration_start",
                    models.DateTimeField(
                        help_text="When registration opens",
                        verbose_name="registration start",
                    ),
                ),
                (
                    "registration_end",
                    models.DateTimeField(
                        help_text="When registration closes",
                        verbose_name="registration end",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("registration", "Registration Open"),
                            ("running", "Running"),
                            ("paused", "Paused"),
                            ("finished", "Finished"),
                            ("archived", "Archived"),
                        ],
                        default="planning",
                        help_text="Current status of the event",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "access",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("invite", "Invite Only"),
                        ],
                        default="public",
                        help_text="Access control for the event",
                        max_length=20,
                        verbose_name="access",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the event is visible in event listings",
                        verbose_name="is visible",
                    ),
                ),
                (
                    "scoreboard_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the scoreboard is visible to participants",
                        verbose_name="scoreboard visible",
                    ),
                ),
                (
                    "invite_code",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Code for invite-only events",
                        verbose_name="invite code",
                    ),
                ),
                (
                    "max_team_size",
                    models.IntegerField(
                        default=4,
                        help_text="Maximum members per team",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="maximum team size",
                    ),
                ),
                (
                    "min_team_size",
                    models.IntegerField(
                        default=1,
                        help_text="Minimum members per team",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                        verbose_name="minimum team size",
                    ),
                ),
                (
                    "allow_individual_participants",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users can participate without a team",
                        verbose_name="allow individual participants",
                    ),
                ),
                (
                    "view_after_completion",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the event is viewable after it ends",
                        verbose_name="view after completion",
                    ),
                ),
                (
                    "registration_email_template",
                    models.TextField(
                        blank=True,
                        help_text="Email template for registration confirmations",
                        null=True,
                        verbose_name="registration email template",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the event was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the event was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "event",
                "verbose_name_plural": "events",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="EventActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("registration", "Registration"),
                            ("login", "Login"),
                            ("solve", "Challenge Solve"),
                            ("hint", "Hint Unlock"),
                            ("submission", "Flag Submission"),
                            ("announcement", "Announcement"),
                            ("score_change", "Score Change"),
                            ("team_join", "Team Join"),
                            ("team_leave", "Team Leave"),
                            ("admin_action", "Admin Action"),
                        ],
                        help_text="Type of activity",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the activity occurred",
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional activity data",
                        null=True,
                        verbose_name="data",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address associated with this activity",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
            ],
            options={
                "verbose_name": "event activity",
                "verbose_name_plural": "event activities",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="EventAnnouncement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Announcement title",
                        max_length=100,
                        verbose_name="title",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Announcement content (supports Markdown)",
                        verbose_name="content",
                    ),
                ),
                (
                    "is_important",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is an important announcement",
                        verbose_name="is important",
                    ),
                ),
                (
                    "publish_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When to publish the announcement",
                        verbose_name="publish time",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the announcement was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the announcement was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "event announcement",
                "verbose_name_plural": "event announcements",
                "ordering": ["-publish_time"],
            },
        ),
        migrations.CreateModel(
            name="EventPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Page title", max_length=100, verbose_name="title"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly name for the page",
                        max_length=120,
                        verbose_name="slug",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Page content (supports Markdown)",
                        verbose_name="content",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the page is visible",
                        verbose_name="is published",
                    ),
                ),
                (
                    "auth_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether authentication is required to view",
                        verbose_name="authentication required",
                    ),
                ),
                (
                    "registration_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether event registration is required to view",
                        verbose_name="registration required",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Order in navigation", verbose_name="order"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the page was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the page was last updated",
                        verbose_name="updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "event page",
                "verbose_name_plural": "event pages",
                "ordering": ["event", "order", "title"],
            },
        ),
        migrations.CreateModel(
            name="EventRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("waitlisted", "Waitlisted"),
                        ],
                        default="pending",
                        help_text="Registration status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "registered_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the registration was submitted",
                        verbose_name="registered at",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the registration was approved",
                        null=True,
                        verbose_name="approved at",
                    ),
                ),
                (
                    "is_eligible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the registration is eligible for prizes",
                        verbose_name="is eligible",
                    ),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional registration data",
                        null=True,
                        verbose_name="extra data",
                    ),
                ),
            ],
            options={
                "verbose_name": "event registration",
                "verbose_name_plural": "event registrations",
                "ordering": ["event", "-registered_at"],
            },
        ),
        migrations.CreateModel(
            name="EventSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "allow_zero_point_challenges",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to allow challenges with zero points",
                        verbose_name="allow zero point challenges",
                    ),
                ),
                (
                    "use_dynamic_scoring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to use dynamic scoring based on solves",
                        verbose_name="use dynamic scoring",
                    ),
                ),
                (
                    "freeze_scoreboard_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When to freeze the scoreboard updates",
                        null=True,
                        verbose_name="freeze scoreboard at",
                    ),
                ),
                (
                    "require_email_verification",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users must verify email to participate",
                        verbose_name="require email verification",
                    ),
                ),
                (
                    "auto_approve_participants",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to automatically approve registrations",
                        verbose_name="auto approve participants",
                    ),
                ),
                (
                    "allow_team_creation",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users can create teams",
                        verbose_name="allow team creation",
                    ),
                ),
                (
                    "allow_team_joining",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users can join teams",
                        verbose_name="allow team joining",
                    ),
                ),
                (
                    "show_challenges_before_start",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to show challenges before event starts",
                        verbose_name="show challenges before start",
                    ),
                ),
                (
                    "allow_challenge_feedback",
                    models.BooleanField(
                        default=True,
                        help_text="Whether users can submit feedback on challenges",
                        verbose_name="allow challenge feedback",
                    ),
                ),
                (
                    "enable_team_communication",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to enable team chat features",
                        verbose_name="enable team communication",
                    ),
                ),
                (
                    "enable_hints",
                    models.BooleanField(
                        default=True,
                        help_text="Whether hints are available for challenges",
                        verbose_name="enable hints",
                    ),
                ),
                (
                    "enable_user_custom_fields",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to collect additional custom information during user registration",
                        verbose_name="enable user custom fields",
                    ),
                ),
                (
                    "enable_team_custom_fields",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to collect additional custom information during team creation",
                        verbose_name="enable team custom fields",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        default="default",
                        help_text="Theme for the event pages",
                        max_length=50,
                        verbose_name="theme",
                    ),
                ),
                (
                    "custom_css",
                    models.TextField(
                        blank=True,
                        help_text="Custom CSS for event pages",
                        null=True,
                        verbose_name="custom CSS",
                    ),
                ),
                (
                    "custom_js",
                    models.TextField(
                        blank=True,
                        help_text="Custom JavaScript for event pages",
                        null=True,
                        verbose_name="custom JavaScript",
                    ),
                ),
                (
                    "submission_cooldown",
                    models.IntegerField(
                        default=5,
                        help_text="Seconds between flag submissions",
                        verbose_name="submission cooldown",
                    ),
                ),
                (
                    "max_submissions_per_minute",
                    models.IntegerField(
                        default=10,
                        help_text="Maximum flag submissions per minute",
                        verbose_name="max submissions per minute",
                    ),
                ),
            ],
            options={
                "verbose_name": "event settings",
                "verbose_name_plural": "event settings",
            },
        ),
        migrations.CreateModel(
            name="Scoreboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the scoreboard was last updated",
                        verbose_name="last updated",
                    ),
                ),
                (
                    "is_frozen",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the scoreboard is currently frozen",
                        verbose_name="is frozen",
                    ),
                ),
                (
                    "freeze_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the scoreboard was frozen",
                        null=True,
                        verbose_name="freeze time",
                    ),
                ),
            ],
            options={
                "verbose_name": "scoreboard",
                "verbose_name_plural": "scoreboards",
            },
        ),
        migrations.CreateModel(
            name="ScoreboardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        default=0, help_text="Team's total score", verbose_name="score"
                    ),
                ),
                (
                    "last_score_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the team last scored points",
                        verbose_name="last score time",
                    ),
                ),
                (
                    "rank",
                    models.IntegerField(
                        default=0, help_text="Team's current rank", verbose_name="rank"
                    ),
                ),
                (
                    "challenge_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of challenges solved",
                        verbose_name="challenge count",
                    ),
                ),
                (
                    "is_eligible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the team is eligible for prizes/ranking",
                        verbose_name="is eligible",
                    ),
                ),
                (
                    "scoreboard",
                    models.ForeignKey(
                        help_text="Scoreboard this entry belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="event.scoreboard",
                    ),
                ),
            ],
            options={
                "verbose_name": "scoreboard entry",
                "verbose_name_plural": "scoreboard entries",
                "ordering": ["-score", "last_score_time"],
            },
        ),
    ]
